testVarRatio(data[, 4])
testVarRatio(data[, 5])
#aTest <- rnorm(10000)
#testVarRatio(aTest)
#qqnorm(aTest)
#=============================================================
# 4) Test serial correlation
acf(data[, 1])
pacf(data[, 1])
acf(data[, 2])
pacf(data[, 2])
acf(data[, 3])
pacf(data[, 3])
acf(data[ 4])
pacf(data[, 4])
acf(data[, 5])
pacf(data[, 5])
#=============================================================
# 5) ARMA models
# Fit Best ARIMA Model To Univariate Time Series
#   Returns best ARIMA model according to either AIC, AICc or BIC value.
#   The function conducts a search over possible model within the order
#   constraints provided.
auto.arima(data[, 1])
auto.arima(data[, 2])
auto.arima(data[, 3])
auto.arima(data[, 4])
auto.arima(data[, 5])
# install.packages("tseries")
# install.packages("urca")
# install.packages("forecast")
library("tseries")
library("urca")
library("forecast")
data <- read.csv('C:/Users/zheng/Documents/2 学术 Academics/Mathematics/15.455 Advance Financial Mathematics/PSets/PS3-data.csv', header = TRUE)
# Plot data
hist(data[, 1], breaks = 30)
hist(data[, 2], breaks = 30)
hist(data[, 3], breaks = 30)
hist(data[, 4], breaks = 30)
hist(data[, 5], breaks = 30)
#=============================================================
# a) Annualized mean and standard deviation
annualMean <- c()
annualStd <- c()
for (i in 1:5){
annualMean[i] <- sum(data[, i])
annualStd[i] <- sd(data[, i]) * sqrt(252)
}
annualMean
annualStd
#=============================================================
# b) Test stationary
# Perform the Augmented Dickey-Fuller test
#   for the null hypothesis of x is a non-stationary time series.
adf.test(data[, 1])
adf.test(data[, 2])
adf.test(data[, 3])
adf.test(data[, 4])
adf.test(data[, 5])
# Perform the Kwiatkowski-Phillips-Schmidt-Shin test
#   for the null hypothesis of x is a stationary time series.
kpss.test(data[, 1])
kpss.test(data[, 2])
kpss.test(data[, 3])
kpss.test(data[, 4])
kpss.test(data[, 5])
#=============================================================
# c) Test random walk
varianceRatio <- function(returns, q){
n <- length(returns)
periodReturns <- c()
for (i in 1:(n-q+1)){
periodReturns[i] <- sum(returns[i:(i+q-1)])
}
numerator <- var(periodReturns)
denominator <- q * var(returns)
return(numerator / denominator)
}
zVarRatio <- function(returns, q){
n <- length(returns)
a <- sqrt(n/(2*(q-1)))
#  a <- sqrt(n*(3*q) / (2*(2*q-1)*(q-1)))
varRatio <- varianceRatio(returns, q)
z <- a * (varRatio - 1)
return(z)
}
testVarRatio <- function(returns){
zStats <- c()
for (q in 2:100){
zStats[q] <- zVarRatio(returns, q)
}
barplot(zStats)
qqnorm(zStats)
#  pValues <- 2 * pnorm(-abs(zStats))
#  return(pValues)
}
testVarRatio(data[, 1])
testVarRatio(data[, 2])
testVarRatio(data[, 3])
testVarRatio(data[, 4])
testVarRatio(data[, 5])
#aTest <- rnorm(10000)
#testVarRatio(aTest)
#qqnorm(aTest)
#=============================================================
# 4) Test serial correlation
acf(data[, 1])
pacf(data[, 1])
acf(data[, 2])
pacf(data[, 2])
acf(data[, 3])
pacf(data[, 3])
acf(data[ 4])
pacf(data[, 4])
acf(data[, 5])
pacf(data[, 5])
#=============================================================
# 5) ARMA models
# Fit Best ARIMA Model To Univariate Time Series
#   Returns best ARIMA model according to either AIC, AICc or BIC value.
#   The function conducts a search over possible model within the order
#   constraints provided.
auto.arima(data[, 1])
auto.arima(data[, 2])
auto.arima(data[, 3])
auto.arima(data[, 4])
auto.arima(data[, 5])
install.packages("forcast")
install.packages("forecast)
install.packages("forecast")
install.packages("forecast")
auto.arima(data[, 1])
# install.packages("tseries")
# install.packages("urca")
# install.packages("forecast")
library("tseries")
library("urca")
data <- read.csv('C:/Users/zheng/Documents/2 学术 Academics/Mathematics/15.455 Advance Financial Mathematics/PSets/PS3-data.csv', header = TRUE)
# Plot data
hist(data[, 1], breaks = 30)
hist(data[, 2], breaks = 30)
hist(data[, 3], breaks = 30)
hist(data[, 4], breaks = 30)
hist(data[, 5], breaks = 30)
#=============================================================
# a) Annualized mean and standard deviation
annualMean <- c()
annualStd <- c()
for (i in 1:5){
annualMean[i] <- sum(data[, i])
annualStd[i] <- sd(data[, i]) * sqrt(252)
}
annualMean
annualStd
#=============================================================
# b) Test stationary
# Perform the Augmented Dickey-Fuller test
#   for the null hypothesis of x is a non-stationary time series.
adf.test(data[, 1])
adf.test(data[, 2])
adf.test(data[, 3])
adf.test(data[, 4])
adf.test(data[, 5])
# Perform the Kwiatkowski-Phillips-Schmidt-Shin test
#   for the null hypothesis of x is a stationary time series.
kpss.test(data[, 1])
kpss.test(data[, 2])
kpss.test(data[, 3])
kpss.test(data[, 4])
kpss.test(data[, 5])
#=============================================================
# c) Test random walk
varianceRatio <- function(returns, q){
n <- length(returns)
periodReturns <- c()
for (i in 1:(n-q+1)){
periodReturns[i] <- sum(returns[i:(i+q-1)])
}
numerator <- var(periodReturns)
denominator <- q * var(returns)
return(numerator / denominator)
}
zVarRatio <- function(returns, q){
n <- length(returns)
a <- sqrt(n/(2*(q-1)))
#  a <- sqrt(n*(3*q) / (2*(2*q-1)*(q-1)))
varRatio <- varianceRatio(returns, q)
z <- a * (varRatio - 1)
return(z)
}
testVarRatio <- function(returns){
zStats <- c()
for (q in 2:100){
zStats[q] <- zVarRatio(returns, q)
}
barplot(zStats)
qqnorm(zStats)
#  pValues <- 2 * pnorm(-abs(zStats))
#  return(pValues)
}
testVarRatio(data[, 1])
testVarRatio(data[, 2])
testVarRatio(data[, 3])
testVarRatio(data[, 4])
testVarRatio(data[, 5])
#aTest <- rnorm(10000)
#testVarRatio(aTest)
#qqnorm(aTest)
#=============================================================
# 4) Test serial correlation
acf(data[, 1])
pacf(data[, 1])
acf(data[, 2])
pacf(data[, 2])
acf(data[, 3])
pacf(data[, 3])
acf(data[ 4])
pacf(data[, 4])
acf(data[, 5])
pacf(data[, 5])
#=============================================================
# 5) ARMA models
# Fit Best ARIMA Model To Univariate Time Series
#   Returns best ARIMA model according to either AIC, AICc or BIC value.
#   The function conducts a search over possible model within the order
#   constraints provided.
library("forecast")
auto.arima(data[, 1])
auto.arima(data[, 2])
auto.arima(data[, 3])
auto.arima(data[, 4])
auto.arima(data[, 5])
input_file <- "RawReturnData.txt"
rawData <- read.delim(input_file)
View(rawData)
rawData <- read.delim("RawReturnData.txt")
help("read.delim")
rawData <- read.delim("RawReturnData.txt")
rawData <- read.delim("C:/Users/zheng/Desktop/RawReturnData.txt")
view(rawData)
View(rawData)
str(rawData)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt")
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", delim=",")
View(rawData)
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",")
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=T)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.delim("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=T)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.delim("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=FALSE)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=FALSE)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=T)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawData <- read.table("C:/Users/zheng/Desktop/RawReturnData.txt", sep=",", header=F)
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawColumnNames <- c("nm_tradedate", "t", "id", "log_return")
rawData <- read.table(input_file, sep=",", header=F, col.names=rawColumnNames )
View(rawData)
# Project B
input_file <- "RawReturnData.txt"
rawColumnNames <- c("nm_tradedate", "t", "id", "log_return")
rawData <- read.table(input_file, sep=",", header=F, col.names=rawColumnNames)
View(rawData)
library(dplyr)
rawdata <- read.csv("Denormalized table.csv",header = T)
rawdata <- rawdata[,-1]
for(i in 1:nrow(rawdata))
{
for(j in 1:ncol(rawdata))
{
rawdata[i,j] <- exp(rawdata[i,j]) -1
}
}
R_average <- c()
for(i in 1:nrow(rawdata))
{
R_average[i] <- sum(rawdata[i,c(1:ncol(rawdata))])/(ncol(rawdata))
}
rawdata$average <- R_average
#write.csv(rawdata,"C:/Users/71491/Desktop/simple return.csv")
Difference <- data.frame()
for(i in 1 : nrow(rawdata))
{
for(j in 1 : ncol(rawdata))
{
Difference[i,j] <- (rawdata[i,j]-rawdata$average[i])
}
}
#write.csv(Difference,"C:/Users/71491/Desktop/difference.csv")
C <- c()
sumoflong <- 0
for(i in 1 : nrow(rawdata))
{
for(j in 1 : ncol(rawdata))
{
if(rawdata[i,j] < rawdata$average[i])
{
sumoflong <- sumoflong + (rawdata[i,j]-rawdata$average[i])
}
}
C[i] <- -1/sumoflong
sumoflong <- 0
}
weight <- data.frame()
for(i in 1 : nrow(rawdata))
{
for(j in 1 : ncol(rawdata))
{
weight[i,j] <- -1*C[i]*(rawdata[i,j]-rawdata$average[i])
}
}
#write.csv(weight,"C:/Users/71491/Desktop/weight.csv")
returnxx <- rep(0,nrow(rawdata)-1)
rr <- 0
for(i in 2:nrow(rawdata))
{
for(j in 1:(ncol(rawdata)-1))
{
rr <- rr + rawdata[i,j]*weight[i-1,j]
}
returnxx[i-1] <- rr
rr <- 0
}
#write.csv(returnxx,"C:/Users/71491/Desktop/profolio simple return.csv")
x <- 1:length(returnxx)
plot(x,returnxx,type = "l")
plot(x,rawdata$average,type = "l")
returnlog <- log(returnxx+1)
mean(returnlog)*252
library(dplyr)
rawdata <- read.csv("Denormalized table.csv",header = T)
library(dplyr)
rawdata <- read.csv("Denormalized table.csv",header = T)
rawdata <- read.csv("C:/Users/zheng/Documents/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project B/Denormalized table.csv",header = T)
view(rawdata)
View(rawdata)
library(data.table)
df = fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date = as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
library(data.table)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
library(data.table)
library(data.table)
install.packages('data.table')
library(data.table)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
library(data.table)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
library(data.table)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/clean.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
View(df)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ols = lm(df$Portfolio~df$Signal1)
summary(ols)
ols = lm(df$Portfolio ~ df$Signal1)
summary(ols)
ols = lm(df$Portfolio ~ df$Signal2)
summary(ols)
ols = lm(df$Portfolio ~ df$Signal3)
summary(ols)
ols = lm(df$Portfolio ~ df$Signal4)
summary(ols)
df = df%>%
mutate(ret=log(Portfolio/log(Portfolio)))
library(data.table)
library(dplyr)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/class.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
df <- fread('/Users/zheng/Documents/GitHub/15-458-playground/data/clean.csv')
str(df)
df$Date <- as.Date(df$Date, format='%m/%d/%Y')
plot(y=df$Portfolio, x=df$Date)
View(df)
summary(df)
# Signal 1 is the mean
ols = lm(df$Portfolio ~ df$Signal1)
summary(ols)
# Signal 2 is RAND from 0 to 1
ols = lm(df$Portfolio ~ df$Signal2)
summary(ols)
# Signal 3 = Sig1 + Sig2
ols = lm(df$Portfolio ~ df$Signal3)
summary(ols)
# Signal 4 = lag 3 days and divide by 2018
ols = lm(df$Portfolio ~ df$Signal4)
summary(ols)
df = df%>%
mutate(ret=log(Portfolio/log(Portfolio)))
Source()
df_Q3e <- read.csv('Q3e - Contra01-2006-Returns-SICsector - FlatFile.csv')
source('~/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project C/Q4/Q4 - CSVtoLATEX code.R')
setwd('~/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project C/Q4')
df_Q3e <- read.csv('Q3e - Contra01-2006-Returns-SICsector - FlatFile.csv')
View(df_Q3e)
install.packages("xtable")
xtable(df_Q3e)
library(xtable)
library(xtable)
xtable(df_Q3e)
library(xtable)
setwd('~/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project C/Q4')
df_Q3e <- read.csv('Q3e - Contra01-2006-Returns-SICsector - FlatFile.csv')
xtable(df_Q3e)
help("xtable")
xtable(df_Q3e, digits=2)
xtable(df_Q3e, digits=3)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
xtable(df_Q3e, digits=3)
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
df_Q3f[1, 1] = 'NA'
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
df_Q3f[1, 1] = 1
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
df_Q3f[1, 1] <- 1
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f <- read.csv('Q3f - Contra01-2006-Returns-GICSsector - FlatFile.csv')
df_Q3f[[1, 1]] <- 1
xtable(df_Q3f, digits=3)
View(df_Q3f)
df_Q3f[1,1] = 'NA'
df_Q3f[1,1] = 'N'
df_Q3f[1,1] = 1
head(df_Q3f)
typeof(df_Q3f)
df_Q3f$GICS.Sectors[1] =NA
df_Q3f$GICS.Sectors[1] ='NA'
df_Q4a <- read.csv('Q4a - Contra01-GICSsector-Weights - 2005-2009 - Max&Min - FlatFile.csv')
xtable(df_Q4a, digits=3)
View(df_Q4a)
df_Q4b <- read.csv('Q4b - Contra01-GICSsector-Weights - 20080915 - FlatFile.csv')
xtable(df_Q4b, digits=3)
View(df_Q4b)
df_Q4c <- read.csv('Q4c - Contra01-GICSsector-Weights - 20070727 - FlatFile.csv')
xtable(df_Q4c, digits=3)
View(df_Q4c)
df_Q4c <- read.csv('Q4c - Contra01-GICSsector-Weights - 20070727 - FlatFile.csv')
xtable(df_Q4c, digits=3)
View(df_Q4c)
#import data
setwd('~/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project C/Q4')
dt4_e_r <- read.csv("Q4d1 - Contra01-GICSfinancial-Weights&Returns.csv",header=TRUE)
dt4_e_mkt <- read_csv("Q3 - FamaFrench (05-09).txt")
#clean the data
dt4_e_mkt$d = as.Date(dt4_e_mkt$d,"%Y-%m-%d")
dt4_e_r$Trade.Date = as.Date(dt4_e_r$Trade.Date,"%m/%d/%Y")
ols4_e = lm((dt4_e_r$Weighted.Return-dt4_e_mkt$rf_str) ~ (dt4_e_mkt$mkt_str-dt4_e_mkt$rf_str))
summary(ols4_e)
setwd('~/2 学术 Academics/Finance/15.458 & 459 Financial Data Science and Computing/Projects/Project C/Q4')
dt4_e_r <- read.csv("Q4d1 - Contra01-GICSfinancial-Weights&Returns.csv",header=TRUE)
dt4_e_mkt <- read_csv("Q3 - FamaFrench (05-09).txt")
dt4_e_mkt <- read.csv("Q3 - FamaFrench (05-09).txt")
dt4_e_mkt$d = as.Date(dt4_e_mkt$d,"%Y-%m-%d")
dt4_e_r$Trade.Date = as.Date(dt4_e_r$Trade.Date,"%m/%d/%Y")
ols4_e = lm((dt4_e_r$Weighted.Return-dt4_e_mkt$rf_str) ~ (dt4_e_mkt$mkt_str-dt4_e_mkt$rf_str))
summary(ols4_e)
